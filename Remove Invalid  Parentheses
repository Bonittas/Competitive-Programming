class Solution(object):
    def removeInvalidParentheses(self, s):
        def is_valid(s):
            count = 0
            for ch in s:
                if ch == '(':
                    count += 1
                elif ch == ')':
                    count -= 1
                    if count < 0:
                        return False
            return count == 0

        def backtrack(s, start, left_rem, right_rem, expr):
            if left_rem == 0 and right_rem == 0:
                if is_valid(s):
                    self.valid_expressions.add(s)
            else:
                for i in range(start, len(s)):
                    if i > start and s[i] == s[i - 1]:
                        continue

                    if s[i] == '(' and left_rem > 0:
                        new_expr = expr + s[i]
                        backtrack(s[:i] + s[i + 1:], i, left_rem - 1, right_rem, new_expr)
                    elif s[i] == ')' and right_rem > 0:
                        new_expr = expr + s[i]
                        backtrack(s[:i] + s[i + 1:], i, left_rem, right_rem - 1, new_expr)

        left = 0
        right = 0

        for ch in s:
            if ch == '(':
                left += 1
            elif ch == ')':
                if left > 0:
                    left -= 1
                else:
                    right += 1

        self.valid_expressions = set()
        backtrack(s, 0, left, right, "")

        return list(self.valid_expressions)
