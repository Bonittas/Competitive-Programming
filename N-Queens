class Solution:
    def solveNQueens(self, n):
        def backtrack(row, cols, diagonals, anti_diagonals, curr_solution):
            if row == n:
                results.append(curr_solution)
                return

            for col in range(n):
                curr_diagonal = row - col
                curr_anti_diagonal = row + col
                if col in cols or curr_diagonal in diagonals or curr_anti_diagonal in anti_diagonals:
                    continue

                cols.add(col)
                diagonals.add(curr_diagonal)
                anti_diagonals.add(curr_anti_diagonal)

                board[row][col] = 'Q'

                backtrack(row + 1, cols, diagonals, anti_diagonals, curr_solution + ["".join(board[row])])

                board[row][col] = '.'

                cols.remove(col)
                diagonals.remove(curr_diagonal)
                anti_diagonals.remove(curr_anti_diagonal)

        results = []
        board = [['.' for _ in range(n)] for _ in range(n)]
        cols = set()
        diagonals = set()
        anti_diagonals = set()
        backtrack(0, cols, diagonals, anti_diagonals, [])
        return results
       
